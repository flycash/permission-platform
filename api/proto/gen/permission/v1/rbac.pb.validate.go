// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: permission/v1/rbac.proto

package permissionv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BusinessConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessConfigMultiError,
// or nil if none found.
func (m *BusinessConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for OwnerType

	// no validation rules for Name

	// no validation rules for RateLimit

	// no validation rules for Token

	if len(errors) > 0 {
		return BusinessConfigMultiError(errors)
	}

	return nil
}

// BusinessConfigMultiError is an error wrapping multiple validation errors
// returned by BusinessConfig.ValidateAll() if the designated constraints
// aren't met.
type BusinessConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessConfigMultiError) AllErrors() []error { return m }

// BusinessConfigValidationError is the validation error returned by
// BusinessConfig.Validate if the designated constraints aren't met.
type BusinessConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessConfigValidationError) ErrorName() string { return "BusinessConfigValidationError" }

// Error satisfies the builtin error interface
func (e BusinessConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessConfigValidationError{}

// Validate checks the field values on CreateBusinessConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessConfigRequestMultiError, or nil if none found.
func (m *CreateBusinessConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessConfigRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessConfigRequestMultiError is an error wrapping multiple
// validation errors returned by CreateBusinessConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateBusinessConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessConfigRequestMultiError) AllErrors() []error { return m }

// CreateBusinessConfigRequestValidationError is the validation error returned
// by CreateBusinessConfigRequest.Validate if the designated constraints
// aren't met.
type CreateBusinessConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessConfigRequestValidationError) ErrorName() string {
	return "CreateBusinessConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessConfigRequestValidationError{}

// Validate checks the field values on CreateBusinessConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessConfigResponseMultiError, or nil if none found.
func (m *CreateBusinessConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessConfigResponseMultiError(errors)
	}

	return nil
}

// CreateBusinessConfigResponseMultiError is an error wrapping multiple
// validation errors returned by CreateBusinessConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateBusinessConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessConfigResponseMultiError) AllErrors() []error { return m }

// CreateBusinessConfigResponseValidationError is the validation error returned
// by CreateBusinessConfigResponse.Validate if the designated constraints
// aren't met.
type CreateBusinessConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessConfigResponseValidationError) ErrorName() string {
	return "CreateBusinessConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessConfigResponseValidationError{}

// Validate checks the field values on GetBusinessConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessConfigRequestMultiError, or nil if none found.
func (m *GetBusinessConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetBusinessConfigRequestMultiError(errors)
	}

	return nil
}

// GetBusinessConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetBusinessConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessConfigRequestMultiError) AllErrors() []error { return m }

// GetBusinessConfigRequestValidationError is the validation error returned by
// GetBusinessConfigRequest.Validate if the designated constraints aren't met.
type GetBusinessConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessConfigRequestValidationError) ErrorName() string {
	return "GetBusinessConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessConfigRequestValidationError{}

// Validate checks the field values on GetBusinessConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessConfigResponseMultiError, or nil if none found.
func (m *GetBusinessConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBusinessConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBusinessConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBusinessConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBusinessConfigResponseMultiError(errors)
	}

	return nil
}

// GetBusinessConfigResponseMultiError is an error wrapping multiple validation
// errors returned by GetBusinessConfigResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBusinessConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessConfigResponseMultiError) AllErrors() []error { return m }

// GetBusinessConfigResponseValidationError is the validation error returned by
// GetBusinessConfigResponse.Validate if the designated constraints aren't met.
type GetBusinessConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessConfigResponseValidationError) ErrorName() string {
	return "GetBusinessConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessConfigResponseValidationError{}

// Validate checks the field values on UpdateBusinessConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessConfigRequestMultiError, or nil if none found.
func (m *UpdateBusinessConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessConfigRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateBusinessConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessConfigRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessConfigRequestValidationError is the validation error returned
// by UpdateBusinessConfigRequest.Validate if the designated constraints
// aren't met.
type UpdateBusinessConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessConfigRequestValidationError) ErrorName() string {
	return "UpdateBusinessConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessConfigRequestValidationError{}

// Validate checks the field values on UpdateBusinessConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessConfigResponseMultiError, or nil if none found.
func (m *UpdateBusinessConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateBusinessConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateBusinessConfigResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateBusinessConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessConfigResponseMultiError) AllErrors() []error { return m }

// UpdateBusinessConfigResponseValidationError is the validation error returned
// by UpdateBusinessConfigResponse.Validate if the designated constraints
// aren't met.
type UpdateBusinessConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessConfigResponseValidationError) ErrorName() string {
	return "UpdateBusinessConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessConfigResponseValidationError{}

// Validate checks the field values on DeleteBusinessConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessConfigRequestMultiError, or nil if none found.
func (m *DeleteBusinessConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBusinessConfigRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessConfigRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteBusinessConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteBusinessConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessConfigRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessConfigRequestValidationError is the validation error returned
// by DeleteBusinessConfigRequest.Validate if the designated constraints
// aren't met.
type DeleteBusinessConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessConfigRequestValidationError) ErrorName() string {
	return "DeleteBusinessConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessConfigRequestValidationError{}

// Validate checks the field values on DeleteBusinessConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessConfigResponseMultiError, or nil if none found.
func (m *DeleteBusinessConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteBusinessConfigResponseMultiError(errors)
	}

	return nil
}

// DeleteBusinessConfigResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteBusinessConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteBusinessConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessConfigResponseMultiError) AllErrors() []error { return m }

// DeleteBusinessConfigResponseValidationError is the validation error returned
// by DeleteBusinessConfigResponse.Validate if the designated constraints
// aren't met.
type DeleteBusinessConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessConfigResponseValidationError) ErrorName() string {
	return "DeleteBusinessConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessConfigResponseValidationError{}

// Validate checks the field values on ListBusinessConfigsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessConfigsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessConfigsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessConfigsRequestMultiError, or nil if none found.
func (m *ListBusinessConfigsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessConfigsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListBusinessConfigsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessConfigsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBusinessConfigsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListBusinessConfigsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessConfigsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessConfigsRequestMultiError) AllErrors() []error { return m }

// ListBusinessConfigsRequestValidationError is the validation error returned
// by ListBusinessConfigsRequest.Validate if the designated constraints aren't met.
type ListBusinessConfigsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessConfigsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessConfigsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessConfigsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessConfigsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessConfigsRequestValidationError) ErrorName() string {
	return "ListBusinessConfigsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessConfigsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessConfigsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessConfigsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessConfigsRequestValidationError{}

// Validate checks the field values on ListBusinessConfigsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessConfigsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessConfigsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessConfigsResponseMultiError, or nil if none found.
func (m *ListBusinessConfigsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessConfigsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessConfigsResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessConfigsResponseValidationError{
						field:  fmt.Sprintf("Configs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessConfigsResponseValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessConfigsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessConfigsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBusinessConfigsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListBusinessConfigsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessConfigsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessConfigsResponseMultiError) AllErrors() []error { return m }

// ListBusinessConfigsResponseValidationError is the validation error returned
// by ListBusinessConfigsResponse.Validate if the designated constraints
// aren't met.
type ListBusinessConfigsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessConfigsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessConfigsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessConfigsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessConfigsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessConfigsResponseValidationError) ErrorName() string {
	return "ListBusinessConfigsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessConfigsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessConfigsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessConfigsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessConfigsResponseValidationError{}

// Validate checks the field values on CreateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourceRequestMultiError, or nil if none found.
func (m *CreateResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateResourceRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateResourceRequestMultiError(errors)
	}

	return nil
}

// CreateResourceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourceRequestMultiError) AllErrors() []error { return m }

// CreateResourceRequestValidationError is the validation error returned by
// CreateResourceRequest.Validate if the designated constraints aren't met.
type CreateResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceRequestValidationError) ErrorName() string {
	return "CreateResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceRequestValidationError{}

// Validate checks the field values on CreateResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourceResponseMultiError, or nil if none found.
func (m *CreateResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateResourceResponseMultiError(errors)
	}

	return nil
}

// CreateResourceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourceResponseMultiError) AllErrors() []error { return m }

// CreateResourceResponseValidationError is the validation error returned by
// CreateResourceResponse.Validate if the designated constraints aren't met.
type CreateResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceResponseValidationError) ErrorName() string {
	return "CreateResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceResponseValidationError{}

// Validate checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceRequestMultiError, or nil if none found.
func (m *GetResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetResourceRequestMultiError(errors)
	}

	return nil
}

// GetResourceRequestMultiError is an error wrapping multiple validation errors
// returned by GetResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceRequestMultiError) AllErrors() []error { return m }

// GetResourceRequestValidationError is the validation error returned by
// GetResourceRequest.Validate if the designated constraints aren't met.
type GetResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceRequestValidationError) ErrorName() string {
	return "GetResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceRequestValidationError{}

// Validate checks the field values on GetResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceResponseMultiError, or nil if none found.
func (m *GetResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResourceResponseValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResourceResponseValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResourceResponseMultiError(errors)
	}

	return nil
}

// GetResourceResponseMultiError is an error wrapping multiple validation
// errors returned by GetResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceResponseMultiError) AllErrors() []error { return m }

// GetResourceResponseValidationError is the validation error returned by
// GetResourceResponse.Validate if the designated constraints aren't met.
type GetResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceResponseValidationError) ErrorName() string {
	return "GetResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceResponseValidationError{}

// Validate checks the field values on UpdateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceRequestMultiError, or nil if none found.
func (m *UpdateResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateResourceRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateResourceRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceRequestMultiError) AllErrors() []error { return m }

// UpdateResourceRequestValidationError is the validation error returned by
// UpdateResourceRequest.Validate if the designated constraints aren't met.
type UpdateResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRequestValidationError) ErrorName() string {
	return "UpdateResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRequestValidationError{}

// Validate checks the field values on UpdateResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceResponseMultiError, or nil if none found.
func (m *UpdateResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateResourceResponseMultiError(errors)
	}

	return nil
}

// UpdateResourceResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceResponseMultiError) AllErrors() []error { return m }

// UpdateResourceResponseValidationError is the validation error returned by
// UpdateResourceResponse.Validate if the designated constraints aren't met.
type UpdateResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceResponseValidationError) ErrorName() string {
	return "UpdateResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceResponseValidationError{}

// Validate checks the field values on DeleteResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceRequestMultiError, or nil if none found.
func (m *DeleteResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceRequestMultiError) AllErrors() []error { return m }

// DeleteResourceRequestValidationError is the validation error returned by
// DeleteResourceRequest.Validate if the designated constraints aren't met.
type DeleteResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceRequestValidationError) ErrorName() string {
	return "DeleteResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceRequestValidationError{}

// Validate checks the field values on DeleteResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceResponseMultiError, or nil if none found.
func (m *DeleteResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteResourceResponseMultiError(errors)
	}

	return nil
}

// DeleteResourceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceResponseMultiError) AllErrors() []error { return m }

// DeleteResourceResponseValidationError is the validation error returned by
// DeleteResourceResponse.Validate if the designated constraints aren't met.
type DeleteResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceResponseValidationError) ErrorName() string {
	return "DeleteResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceResponseValidationError{}

// Validate checks the field values on ListResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourcesRequestMultiError, or nil if none found.
func (m *ListResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListResourcesRequestMultiError(errors)
	}

	return nil
}

// ListResourcesRequestMultiError is an error wrapping multiple validation
// errors returned by ListResourcesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourcesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourcesRequestMultiError) AllErrors() []error { return m }

// ListResourcesRequestValidationError is the validation error returned by
// ListResourcesRequest.Validate if the designated constraints aren't met.
type ListResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourcesRequestValidationError) ErrorName() string {
	return "ListResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourcesRequestValidationError{}

// Validate checks the field values on ListResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourcesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourcesResponseMultiError, or nil if none found.
func (m *ListResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResourcesResponseValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResourcesResponseValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResourcesResponseMultiError(errors)
	}

	return nil
}

// ListResourcesResponseMultiError is an error wrapping multiple validation
// errors returned by ListResourcesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourcesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourcesResponseMultiError) AllErrors() []error { return m }

// ListResourcesResponseValidationError is the validation error returned by
// ListResourcesResponse.Validate if the designated constraints aren't met.
type ListResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourcesResponseValidationError) ErrorName() string {
	return "ListResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourcesResponseValidationError{}

// Validate checks the field values on CreatePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePermissionRequestMultiError, or nil if none found.
func (m *CreatePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePermissionRequestValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePermissionRequestMultiError(errors)
	}

	return nil
}

// CreatePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionRequestMultiError) AllErrors() []error { return m }

// CreatePermissionRequestValidationError is the validation error returned by
// CreatePermissionRequest.Validate if the designated constraints aren't met.
type CreatePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionRequestValidationError) ErrorName() string {
	return "CreatePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionRequestValidationError{}

// Validate checks the field values on CreatePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePermissionResponseMultiError, or nil if none found.
func (m *CreatePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePermissionResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePermissionResponseMultiError(errors)
	}

	return nil
}

// CreatePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePermissionResponseMultiError) AllErrors() []error { return m }

// CreatePermissionResponseValidationError is the validation error returned by
// CreatePermissionResponse.Validate if the designated constraints aren't met.
type CreatePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionResponseValidationError) ErrorName() string {
	return "CreatePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionResponseValidationError{}

// Validate checks the field values on GetPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionRequestMultiError, or nil if none found.
func (m *GetPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPermissionRequestMultiError(errors)
	}

	return nil
}

// GetPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionRequestMultiError) AllErrors() []error { return m }

// GetPermissionRequestValidationError is the validation error returned by
// GetPermissionRequest.Validate if the designated constraints aren't met.
type GetPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionRequestValidationError) ErrorName() string {
	return "GetPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionRequestValidationError{}

// Validate checks the field values on GetPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionResponseMultiError, or nil if none found.
func (m *GetPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPermissionResponseValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionResponseValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPermissionResponseMultiError(errors)
	}

	return nil
}

// GetPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by GetPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionResponseMultiError) AllErrors() []error { return m }

// GetPermissionResponseValidationError is the validation error returned by
// GetPermissionResponse.Validate if the designated constraints aren't met.
type GetPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionResponseValidationError) ErrorName() string {
	return "GetPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionResponseValidationError{}

// Validate checks the field values on UpdatePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionRequestMultiError, or nil if none found.
func (m *UpdatePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePermissionRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePermissionRequestValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePermissionRequestMultiError(errors)
	}

	return nil
}

// UpdatePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionRequestMultiError) AllErrors() []error { return m }

// UpdatePermissionRequestValidationError is the validation error returned by
// UpdatePermissionRequest.Validate if the designated constraints aren't met.
type UpdatePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionRequestValidationError) ErrorName() string {
	return "UpdatePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionRequestValidationError{}

// Validate checks the field values on UpdatePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePermissionResponseMultiError, or nil if none found.
func (m *UpdatePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdatePermissionResponseMultiError(errors)
	}

	return nil
}

// UpdatePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePermissionResponseMultiError) AllErrors() []error { return m }

// UpdatePermissionResponseValidationError is the validation error returned by
// UpdatePermissionResponse.Validate if the designated constraints aren't met.
type UpdatePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePermissionResponseValidationError) ErrorName() string {
	return "UpdatePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePermissionResponseValidationError{}

// Validate checks the field values on DeletePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionRequestMultiError, or nil if none found.
func (m *DeletePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePermissionRequestMultiError(errors)
	}

	return nil
}

// DeletePermissionRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionRequestMultiError) AllErrors() []error { return m }

// DeletePermissionRequestValidationError is the validation error returned by
// DeletePermissionRequest.Validate if the designated constraints aren't met.
type DeletePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionRequestValidationError) ErrorName() string {
	return "DeletePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionRequestValidationError{}

// Validate checks the field values on DeletePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePermissionResponseMultiError, or nil if none found.
func (m *DeletePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeletePermissionResponseMultiError(errors)
	}

	return nil
}

// DeletePermissionResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePermissionResponseMultiError) AllErrors() []error { return m }

// DeletePermissionResponseValidationError is the validation error returned by
// DeletePermissionResponse.Validate if the designated constraints aren't met.
type DeletePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePermissionResponseValidationError) ErrorName() string {
	return "DeletePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePermissionResponseValidationError{}

// Validate checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsRequestMultiError, or nil if none found.
func (m *ListPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListPermissionsRequestMultiError(errors)
	}

	return nil
}

// ListPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsRequestMultiError) AllErrors() []error { return m }

// ListPermissionsRequestValidationError is the validation error returned by
// ListPermissionsRequest.Validate if the designated constraints aren't met.
type ListPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsRequestValidationError) ErrorName() string {
	return "ListPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsRequestValidationError{}

// Validate checks the field values on ListPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPermissionsResponseMultiError, or nil if none found.
func (m *ListPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPermissionsResponseMultiError(errors)
	}

	return nil
}

// ListPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPermissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPermissionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPermissionsResponseMultiError) AllErrors() []error { return m }

// ListPermissionsResponseValidationError is the validation error returned by
// ListPermissionsResponse.Validate if the designated constraints aren't met.
type ListPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPermissionsResponseValidationError) ErrorName() string {
	return "ListPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPermissionsResponseValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BizId

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Metadata

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on GetRoleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleRequestMultiError,
// or nil if none found.
func (m *GetRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRoleRequestMultiError(errors)
	}

	return nil
}

// GetRoleRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleRequestMultiError) AllErrors() []error { return m }

// GetRoleRequestValidationError is the validation error returned by
// GetRoleRequest.Validate if the designated constraints aren't met.
type GetRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRequestValidationError) ErrorName() string { return "GetRoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRequestValidationError{}

// Validate checks the field values on GetRoleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleResponseMultiError, or nil if none found.
func (m *GetRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoleResponseMultiError(errors)
	}

	return nil
}

// GetRoleResponseMultiError is an error wrapping multiple validation errors
// returned by GetRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleResponseMultiError) AllErrors() []error { return m }

// GetRoleResponseValidationError is the validation error returned by
// GetRoleResponse.Validate if the designated constraints aren't met.
type GetRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleResponseValidationError) ErrorName() string { return "GetRoleResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleResponseValidationError{}

// Validate checks the field values on UpdateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleRequestMultiError, or nil if none found.
func (m *UpdateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleRequestValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleRequestValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRequestMultiError) AllErrors() []error { return m }

// UpdateRoleRequestValidationError is the validation error returned by
// UpdateRoleRequest.Validate if the designated constraints aren't met.
type UpdateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRequestValidationError) ErrorName() string {
	return "UpdateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRequestValidationError{}

// Validate checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleResponseMultiError, or nil if none found.
func (m *UpdateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleResponseMultiError) AllErrors() []error { return m }

// UpdateRoleResponseValidationError is the validation error returned by
// UpdateRoleResponse.Validate if the designated constraints aren't met.
type UpdateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleResponseValidationError) ErrorName() string {
	return "UpdateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleResponseValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on ListRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesRequestMultiError, or nil if none found.
func (m *ListRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Type

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListRolesRequestMultiError(errors)
	}

	return nil
}

// ListRolesRequestMultiError is an error wrapping multiple validation errors
// returned by ListRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesRequestMultiError) AllErrors() []error { return m }

// ListRolesRequestValidationError is the validation error returned by
// ListRolesRequest.Validate if the designated constraints aren't met.
type ListRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesRequestValidationError) ErrorName() string { return "ListRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesRequestValidationError{}

// Validate checks the field values on ListRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolesResponseMultiError, or nil if none found.
func (m *ListRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRolesResponseMultiError(errors)
	}

	return nil
}

// ListRolesResponseMultiError is an error wrapping multiple validation errors
// returned by ListRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolesResponseMultiError) AllErrors() []error { return m }

// ListRolesResponseValidationError is the validation error returned by
// ListRolesResponse.Validate if the designated constraints aren't met.
type ListRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolesResponseValidationError) ErrorName() string {
	return "ListRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolesResponseValidationError{}

// Validate checks the field values on RoleInclusion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleInclusion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleInclusion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleInclusionMultiError, or
// nil if none found.
func (m *RoleInclusion) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleInclusion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BizId

	// no validation rules for IncludingRoleId

	// no validation rules for IncludingRoleType

	// no validation rules for IncludingRoleName

	// no validation rules for IncludedRoleId

	// no validation rules for IncludedRoleType

	// no validation rules for IncludedRoleName

	if len(errors) > 0 {
		return RoleInclusionMultiError(errors)
	}

	return nil
}

// RoleInclusionMultiError is an error wrapping multiple validation errors
// returned by RoleInclusion.ValidateAll() if the designated constraints
// aren't met.
type RoleInclusionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleInclusionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleInclusionMultiError) AllErrors() []error { return m }

// RoleInclusionValidationError is the validation error returned by
// RoleInclusion.Validate if the designated constraints aren't met.
type RoleInclusionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleInclusionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleInclusionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleInclusionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleInclusionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleInclusionValidationError) ErrorName() string { return "RoleInclusionValidationError" }

// Error satisfies the builtin error interface
func (e RoleInclusionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleInclusion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleInclusionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleInclusionValidationError{}

// Validate checks the field values on CreateRoleInclusionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleInclusionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleInclusionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleInclusionRequestMultiError, or nil if none found.
func (m *CreateRoleInclusionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleInclusionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleInclusion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleInclusionRequestValidationError{
					field:  "RoleInclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleInclusionRequestValidationError{
					field:  "RoleInclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleInclusion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleInclusionRequestValidationError{
				field:  "RoleInclusion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleInclusionRequestMultiError(errors)
	}

	return nil
}

// CreateRoleInclusionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateRoleInclusionRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateRoleInclusionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleInclusionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleInclusionRequestMultiError) AllErrors() []error { return m }

// CreateRoleInclusionRequestValidationError is the validation error returned
// by CreateRoleInclusionRequest.Validate if the designated constraints aren't met.
type CreateRoleInclusionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleInclusionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleInclusionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleInclusionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleInclusionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleInclusionRequestValidationError) ErrorName() string {
	return "CreateRoleInclusionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleInclusionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleInclusionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleInclusionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleInclusionRequestValidationError{}

// Validate checks the field values on CreateRoleInclusionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleInclusionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleInclusionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleInclusionResponseMultiError, or nil if none found.
func (m *CreateRoleInclusionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleInclusionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleInclusion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleInclusionResponseValidationError{
					field:  "RoleInclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleInclusionResponseValidationError{
					field:  "RoleInclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleInclusion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleInclusionResponseValidationError{
				field:  "RoleInclusion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleInclusionResponseMultiError(errors)
	}

	return nil
}

// CreateRoleInclusionResponseMultiError is an error wrapping multiple
// validation errors returned by CreateRoleInclusionResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateRoleInclusionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleInclusionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleInclusionResponseMultiError) AllErrors() []error { return m }

// CreateRoleInclusionResponseValidationError is the validation error returned
// by CreateRoleInclusionResponse.Validate if the designated constraints
// aren't met.
type CreateRoleInclusionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleInclusionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleInclusionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleInclusionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleInclusionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleInclusionResponseValidationError) ErrorName() string {
	return "CreateRoleInclusionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleInclusionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleInclusionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleInclusionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleInclusionResponseValidationError{}

// Validate checks the field values on GetRoleInclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleInclusionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleInclusionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleInclusionRequestMultiError, or nil if none found.
func (m *GetRoleInclusionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleInclusionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRoleInclusionRequestMultiError(errors)
	}

	return nil
}

// GetRoleInclusionRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoleInclusionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoleInclusionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleInclusionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleInclusionRequestMultiError) AllErrors() []error { return m }

// GetRoleInclusionRequestValidationError is the validation error returned by
// GetRoleInclusionRequest.Validate if the designated constraints aren't met.
type GetRoleInclusionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleInclusionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleInclusionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleInclusionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleInclusionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleInclusionRequestValidationError) ErrorName() string {
	return "GetRoleInclusionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleInclusionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleInclusionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleInclusionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleInclusionRequestValidationError{}

// Validate checks the field values on GetRoleInclusionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleInclusionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleInclusionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleInclusionResponseMultiError, or nil if none found.
func (m *GetRoleInclusionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleInclusionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleInclusion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoleInclusionResponseValidationError{
					field:  "RoleInclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoleInclusionResponseValidationError{
					field:  "RoleInclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleInclusion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoleInclusionResponseValidationError{
				field:  "RoleInclusion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoleInclusionResponseMultiError(errors)
	}

	return nil
}

// GetRoleInclusionResponseMultiError is an error wrapping multiple validation
// errors returned by GetRoleInclusionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRoleInclusionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleInclusionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleInclusionResponseMultiError) AllErrors() []error { return m }

// GetRoleInclusionResponseValidationError is the validation error returned by
// GetRoleInclusionResponse.Validate if the designated constraints aren't met.
type GetRoleInclusionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleInclusionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleInclusionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleInclusionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleInclusionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleInclusionResponseValidationError) ErrorName() string {
	return "GetRoleInclusionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleInclusionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleInclusionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleInclusionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleInclusionResponseValidationError{}

// Validate checks the field values on DeleteRoleInclusionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleInclusionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleInclusionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleInclusionRequestMultiError, or nil if none found.
func (m *DeleteRoleInclusionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleInclusionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoleInclusionRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleInclusionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteRoleInclusionRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteRoleInclusionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleInclusionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleInclusionRequestMultiError) AllErrors() []error { return m }

// DeleteRoleInclusionRequestValidationError is the validation error returned
// by DeleteRoleInclusionRequest.Validate if the designated constraints aren't met.
type DeleteRoleInclusionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleInclusionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleInclusionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleInclusionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleInclusionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleInclusionRequestValidationError) ErrorName() string {
	return "DeleteRoleInclusionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleInclusionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleInclusionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleInclusionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleInclusionRequestValidationError{}

// Validate checks the field values on DeleteRoleInclusionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleInclusionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleInclusionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleInclusionResponseMultiError, or nil if none found.
func (m *DeleteRoleInclusionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleInclusionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteRoleInclusionResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleInclusionResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteRoleInclusionResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteRoleInclusionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleInclusionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleInclusionResponseMultiError) AllErrors() []error { return m }

// DeleteRoleInclusionResponseValidationError is the validation error returned
// by DeleteRoleInclusionResponse.Validate if the designated constraints
// aren't met.
type DeleteRoleInclusionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleInclusionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleInclusionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleInclusionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleInclusionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleInclusionResponseValidationError) ErrorName() string {
	return "DeleteRoleInclusionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleInclusionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleInclusionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleInclusionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleInclusionResponseValidationError{}

// Validate checks the field values on ListRoleInclusionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleInclusionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleInclusionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleInclusionsRequestMultiError, or nil if none found.
func (m *ListRoleInclusionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleInclusionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListRoleInclusionsRequestMultiError(errors)
	}

	return nil
}

// ListRoleInclusionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListRoleInclusionsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListRoleInclusionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleInclusionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleInclusionsRequestMultiError) AllErrors() []error { return m }

// ListRoleInclusionsRequestValidationError is the validation error returned by
// ListRoleInclusionsRequest.Validate if the designated constraints aren't met.
type ListRoleInclusionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleInclusionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleInclusionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleInclusionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleInclusionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleInclusionsRequestValidationError) ErrorName() string {
	return "ListRoleInclusionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleInclusionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleInclusionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleInclusionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleInclusionsRequestValidationError{}

// Validate checks the field values on ListRoleInclusionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleInclusionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleInclusionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleInclusionsResponseMultiError, or nil if none found.
func (m *ListRoleInclusionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleInclusionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoleInclusions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleInclusionsResponseValidationError{
						field:  fmt.Sprintf("RoleInclusions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleInclusionsResponseValidationError{
						field:  fmt.Sprintf("RoleInclusions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleInclusionsResponseValidationError{
					field:  fmt.Sprintf("RoleInclusions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoleInclusionsResponseMultiError(errors)
	}

	return nil
}

// ListRoleInclusionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListRoleInclusionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListRoleInclusionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleInclusionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleInclusionsResponseMultiError) AllErrors() []error { return m }

// ListRoleInclusionsResponseValidationError is the validation error returned
// by ListRoleInclusionsResponse.Validate if the designated constraints aren't met.
type ListRoleInclusionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleInclusionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleInclusionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleInclusionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleInclusionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleInclusionsResponseValidationError) ErrorName() string {
	return "ListRoleInclusionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleInclusionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleInclusionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleInclusionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleInclusionsResponseValidationError{}

// Validate checks the field values on RolePermission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RolePermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolePermission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RolePermissionMultiError,
// or nil if none found.
func (m *RolePermission) ValidateAll() error {
	return m.validate(true)
}

func (m *RolePermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BizId

	// no validation rules for RoleId

	// no validation rules for PermissionId

	// no validation rules for RoleName

	// no validation rules for RoleType

	// no validation rules for ResourceType

	// no validation rules for ResourceKey

	// no validation rules for PermissionAction

	if len(errors) > 0 {
		return RolePermissionMultiError(errors)
	}

	return nil
}

// RolePermissionMultiError is an error wrapping multiple validation errors
// returned by RolePermission.ValidateAll() if the designated constraints
// aren't met.
type RolePermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolePermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolePermissionMultiError) AllErrors() []error { return m }

// RolePermissionValidationError is the validation error returned by
// RolePermission.Validate if the designated constraints aren't met.
type RolePermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolePermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolePermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolePermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolePermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolePermissionValidationError) ErrorName() string { return "RolePermissionValidationError" }

// Error satisfies the builtin error interface
func (e RolePermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolePermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolePermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolePermissionValidationError{}

// Validate checks the field values on GrantRolePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantRolePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantRolePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantRolePermissionRequestMultiError, or nil if none found.
func (m *GrantRolePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantRolePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRolePermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantRolePermissionRequestValidationError{
					field:  "RolePermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantRolePermissionRequestValidationError{
					field:  "RolePermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRolePermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantRolePermissionRequestValidationError{
				field:  "RolePermission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantRolePermissionRequestMultiError(errors)
	}

	return nil
}

// GrantRolePermissionRequestMultiError is an error wrapping multiple
// validation errors returned by GrantRolePermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type GrantRolePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantRolePermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantRolePermissionRequestMultiError) AllErrors() []error { return m }

// GrantRolePermissionRequestValidationError is the validation error returned
// by GrantRolePermissionRequest.Validate if the designated constraints aren't met.
type GrantRolePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantRolePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantRolePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantRolePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantRolePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantRolePermissionRequestValidationError) ErrorName() string {
	return "GrantRolePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantRolePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantRolePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantRolePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantRolePermissionRequestValidationError{}

// Validate checks the field values on GrantRolePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantRolePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantRolePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantRolePermissionResponseMultiError, or nil if none found.
func (m *GrantRolePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantRolePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRolePermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantRolePermissionResponseValidationError{
					field:  "RolePermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantRolePermissionResponseValidationError{
					field:  "RolePermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRolePermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantRolePermissionResponseValidationError{
				field:  "RolePermission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantRolePermissionResponseMultiError(errors)
	}

	return nil
}

// GrantRolePermissionResponseMultiError is an error wrapping multiple
// validation errors returned by GrantRolePermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type GrantRolePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantRolePermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantRolePermissionResponseMultiError) AllErrors() []error { return m }

// GrantRolePermissionResponseValidationError is the validation error returned
// by GrantRolePermissionResponse.Validate if the designated constraints
// aren't met.
type GrantRolePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantRolePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantRolePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantRolePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantRolePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantRolePermissionResponseValidationError) ErrorName() string {
	return "GrantRolePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantRolePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantRolePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantRolePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantRolePermissionResponseValidationError{}

// Validate checks the field values on RevokeRolePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeRolePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeRolePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeRolePermissionRequestMultiError, or nil if none found.
func (m *RevokeRolePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeRolePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return RevokeRolePermissionRequestMultiError(errors)
	}

	return nil
}

// RevokeRolePermissionRequestMultiError is an error wrapping multiple
// validation errors returned by RevokeRolePermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type RevokeRolePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeRolePermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeRolePermissionRequestMultiError) AllErrors() []error { return m }

// RevokeRolePermissionRequestValidationError is the validation error returned
// by RevokeRolePermissionRequest.Validate if the designated constraints
// aren't met.
type RevokeRolePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeRolePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeRolePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeRolePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeRolePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeRolePermissionRequestValidationError) ErrorName() string {
	return "RevokeRolePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeRolePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeRolePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeRolePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeRolePermissionRequestValidationError{}

// Validate checks the field values on RevokeRolePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeRolePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeRolePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeRolePermissionResponseMultiError, or nil if none found.
func (m *RevokeRolePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeRolePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RevokeRolePermissionResponseMultiError(errors)
	}

	return nil
}

// RevokeRolePermissionResponseMultiError is an error wrapping multiple
// validation errors returned by RevokeRolePermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type RevokeRolePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeRolePermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeRolePermissionResponseMultiError) AllErrors() []error { return m }

// RevokeRolePermissionResponseValidationError is the validation error returned
// by RevokeRolePermissionResponse.Validate if the designated constraints
// aren't met.
type RevokeRolePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeRolePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeRolePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeRolePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeRolePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeRolePermissionResponseValidationError) ErrorName() string {
	return "RevokeRolePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeRolePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeRolePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeRolePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeRolePermissionResponseValidationError{}

// Validate checks the field values on ListRolePermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRolePermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolePermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolePermissionsRequestMultiError, or nil if none found.
func (m *ListRolePermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolePermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	if len(errors) > 0 {
		return ListRolePermissionsRequestMultiError(errors)
	}

	return nil
}

// ListRolePermissionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListRolePermissionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListRolePermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolePermissionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolePermissionsRequestMultiError) AllErrors() []error { return m }

// ListRolePermissionsRequestValidationError is the validation error returned
// by ListRolePermissionsRequest.Validate if the designated constraints aren't met.
type ListRolePermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolePermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolePermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolePermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolePermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolePermissionsRequestValidationError) ErrorName() string {
	return "ListRolePermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolePermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolePermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolePermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolePermissionsRequestValidationError{}

// Validate checks the field values on ListRolePermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRolePermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRolePermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRolePermissionsResponseMultiError, or nil if none found.
func (m *ListRolePermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRolePermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRolePermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRolePermissionsResponseValidationError{
						field:  fmt.Sprintf("RolePermissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRolePermissionsResponseValidationError{
						field:  fmt.Sprintf("RolePermissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRolePermissionsResponseValidationError{
					field:  fmt.Sprintf("RolePermissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRolePermissionsResponseMultiError(errors)
	}

	return nil
}

// ListRolePermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListRolePermissionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListRolePermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRolePermissionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRolePermissionsResponseMultiError) AllErrors() []error { return m }

// ListRolePermissionsResponseValidationError is the validation error returned
// by ListRolePermissionsResponse.Validate if the designated constraints
// aren't met.
type ListRolePermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRolePermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRolePermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRolePermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRolePermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRolePermissionsResponseValidationError) ErrorName() string {
	return "ListRolePermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRolePermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRolePermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRolePermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRolePermissionsResponseValidationError{}

// Validate checks the field values on UserRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRoleMultiError, or nil
// if none found.
func (m *UserRole) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BizId

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for RoleType

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return UserRoleMultiError(errors)
	}

	return nil
}

// UserRoleMultiError is an error wrapping multiple validation errors returned
// by UserRole.ValidateAll() if the designated constraints aren't met.
type UserRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoleMultiError) AllErrors() []error { return m }

// UserRoleValidationError is the validation error returned by
// UserRole.Validate if the designated constraints aren't met.
type UserRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleValidationError) ErrorName() string { return "UserRoleValidationError" }

// Error satisfies the builtin error interface
func (e UserRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleValidationError{}

// Validate checks the field values on GrantUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantUserRoleRequestMultiError, or nil if none found.
func (m *GrantUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantUserRoleRequestValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantUserRoleRequestValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantUserRoleRequestValidationError{
				field:  "UserRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantUserRoleRequestMultiError(errors)
	}

	return nil
}

// GrantUserRoleRequestMultiError is an error wrapping multiple validation
// errors returned by GrantUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type GrantUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantUserRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantUserRoleRequestMultiError) AllErrors() []error { return m }

// GrantUserRoleRequestValidationError is the validation error returned by
// GrantUserRoleRequest.Validate if the designated constraints aren't met.
type GrantUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantUserRoleRequestValidationError) ErrorName() string {
	return "GrantUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantUserRoleRequestValidationError{}

// Validate checks the field values on GrantUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantUserRoleResponseMultiError, or nil if none found.
func (m *GrantUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantUserRoleResponseValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantUserRoleResponseValidationError{
					field:  "UserRole",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantUserRoleResponseValidationError{
				field:  "UserRole",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantUserRoleResponseMultiError(errors)
	}

	return nil
}

// GrantUserRoleResponseMultiError is an error wrapping multiple validation
// errors returned by GrantUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantUserRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantUserRoleResponseMultiError) AllErrors() []error { return m }

// GrantUserRoleResponseValidationError is the validation error returned by
// GrantUserRoleResponse.Validate if the designated constraints aren't met.
type GrantUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantUserRoleResponseValidationError) ErrorName() string {
	return "GrantUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantUserRoleResponseValidationError{}

// Validate checks the field values on RevokeUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeUserRoleRequestMultiError, or nil if none found.
func (m *RevokeUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return RevokeUserRoleRequestMultiError(errors)
	}

	return nil
}

// RevokeUserRoleRequestMultiError is an error wrapping multiple validation
// errors returned by RevokeUserRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokeUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeUserRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeUserRoleRequestMultiError) AllErrors() []error { return m }

// RevokeUserRoleRequestValidationError is the validation error returned by
// RevokeUserRoleRequest.Validate if the designated constraints aren't met.
type RevokeUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeUserRoleRequestValidationError) ErrorName() string {
	return "RevokeUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeUserRoleRequestValidationError{}

// Validate checks the field values on RevokeUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeUserRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeUserRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeUserRoleResponseMultiError, or nil if none found.
func (m *RevokeUserRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeUserRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RevokeUserRoleResponseMultiError(errors)
	}

	return nil
}

// RevokeUserRoleResponseMultiError is an error wrapping multiple validation
// errors returned by RevokeUserRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type RevokeUserRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeUserRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeUserRoleResponseMultiError) AllErrors() []error { return m }

// RevokeUserRoleResponseValidationError is the validation error returned by
// RevokeUserRoleResponse.Validate if the designated constraints aren't met.
type RevokeUserRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeUserRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeUserRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeUserRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeUserRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeUserRoleResponseValidationError) ErrorName() string {
	return "RevokeUserRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeUserRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeUserRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeUserRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeUserRoleResponseValidationError{}

// Validate checks the field values on ListUserRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRolesRequestMultiError, or nil if none found.
func (m *ListUserRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	if len(errors) > 0 {
		return ListUserRolesRequestMultiError(errors)
	}

	return nil
}

// ListUserRolesRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserRolesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRolesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRolesRequestMultiError) AllErrors() []error { return m }

// ListUserRolesRequestValidationError is the validation error returned by
// ListUserRolesRequest.Validate if the designated constraints aren't met.
type ListUserRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRolesRequestValidationError) ErrorName() string {
	return "ListUserRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRolesRequestValidationError{}

// Validate checks the field values on ListUserRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRolesResponseMultiError, or nil if none found.
func (m *ListUserRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserRolesResponseValidationError{
						field:  fmt.Sprintf("UserRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserRolesResponseValidationError{
						field:  fmt.Sprintf("UserRoles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserRolesResponseValidationError{
					field:  fmt.Sprintf("UserRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserRolesResponseMultiError(errors)
	}

	return nil
}

// ListUserRolesResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserRolesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRolesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRolesResponseMultiError) AllErrors() []error { return m }

// ListUserRolesResponseValidationError is the validation error returned by
// ListUserRolesResponse.Validate if the designated constraints aren't met.
type ListUserRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRolesResponseValidationError) ErrorName() string {
	return "ListUserRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRolesResponseValidationError{}

// Validate checks the field values on UserPermission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserPermission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPermission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserPermissionMultiError,
// or nil if none found.
func (m *UserPermission) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPermission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for BizId

	// no validation rules for UserId

	// no validation rules for PermissionId

	// no validation rules for PermissionName

	// no validation rules for ResourceType

	// no validation rules for ResourceKey

	// no validation rules for PermissionAction

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Effect

	if len(errors) > 0 {
		return UserPermissionMultiError(errors)
	}

	return nil
}

// UserPermissionMultiError is an error wrapping multiple validation errors
// returned by UserPermission.ValidateAll() if the designated constraints
// aren't met.
type UserPermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPermissionMultiError) AllErrors() []error { return m }

// UserPermissionValidationError is the validation error returned by
// UserPermission.Validate if the designated constraints aren't met.
type UserPermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPermissionValidationError) ErrorName() string { return "UserPermissionValidationError" }

// Error satisfies the builtin error interface
func (e UserPermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPermissionValidationError{}

// Validate checks the field values on GrantUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantUserPermissionRequestMultiError, or nil if none found.
func (m *GrantUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantUserPermissionRequestValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantUserPermissionRequestValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantUserPermissionRequestValidationError{
				field:  "UserPermission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantUserPermissionRequestMultiError(errors)
	}

	return nil
}

// GrantUserPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by GrantUserPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type GrantUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantUserPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantUserPermissionRequestMultiError) AllErrors() []error { return m }

// GrantUserPermissionRequestValidationError is the validation error returned
// by GrantUserPermissionRequest.Validate if the designated constraints aren't met.
type GrantUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantUserPermissionRequestValidationError) ErrorName() string {
	return "GrantUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantUserPermissionRequestValidationError{}

// Validate checks the field values on GrantUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantUserPermissionResponseMultiError, or nil if none found.
func (m *GrantUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantUserPermissionResponseValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantUserPermissionResponseValidationError{
					field:  "UserPermission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantUserPermissionResponseValidationError{
				field:  "UserPermission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantUserPermissionResponseMultiError(errors)
	}

	return nil
}

// GrantUserPermissionResponseMultiError is an error wrapping multiple
// validation errors returned by GrantUserPermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type GrantUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantUserPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantUserPermissionResponseMultiError) AllErrors() []error { return m }

// GrantUserPermissionResponseValidationError is the validation error returned
// by GrantUserPermissionResponse.Validate if the designated constraints
// aren't met.
type GrantUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantUserPermissionResponseValidationError) ErrorName() string {
	return "GrantUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantUserPermissionResponseValidationError{}

// Validate checks the field values on RevokeUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeUserPermissionRequestMultiError, or nil if none found.
func (m *RevokeUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Id

	if len(errors) > 0 {
		return RevokeUserPermissionRequestMultiError(errors)
	}

	return nil
}

// RevokeUserPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by RevokeUserPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type RevokeUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeUserPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeUserPermissionRequestMultiError) AllErrors() []error { return m }

// RevokeUserPermissionRequestValidationError is the validation error returned
// by RevokeUserPermissionRequest.Validate if the designated constraints
// aren't met.
type RevokeUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeUserPermissionRequestValidationError) ErrorName() string {
	return "RevokeUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeUserPermissionRequestValidationError{}

// Validate checks the field values on RevokeUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeUserPermissionResponseMultiError, or nil if none found.
func (m *RevokeUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RevokeUserPermissionResponseMultiError(errors)
	}

	return nil
}

// RevokeUserPermissionResponseMultiError is an error wrapping multiple
// validation errors returned by RevokeUserPermissionResponse.ValidateAll() if
// the designated constraints aren't met.
type RevokeUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeUserPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeUserPermissionResponseMultiError) AllErrors() []error { return m }

// RevokeUserPermissionResponseValidationError is the validation error returned
// by RevokeUserPermissionResponse.Validate if the designated constraints
// aren't met.
type RevokeUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeUserPermissionResponseValidationError) ErrorName() string {
	return "RevokeUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeUserPermissionResponseValidationError{}

// Validate checks the field values on ListUserPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserPermissionsRequestMultiError, or nil if none found.
func (m *ListUserPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BizId

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListUserPermissionsRequestMultiError(errors)
	}

	return nil
}

// ListUserPermissionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserPermissionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPermissionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPermissionsRequestMultiError) AllErrors() []error { return m }

// ListUserPermissionsRequestValidationError is the validation error returned
// by ListUserPermissionsRequest.Validate if the designated constraints aren't met.
type ListUserPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPermissionsRequestValidationError) ErrorName() string {
	return "ListUserPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPermissionsRequestValidationError{}

// Validate checks the field values on ListUserPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserPermissionsResponseMultiError, or nil if none found.
func (m *ListUserPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUserPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserPermissionsResponseValidationError{
						field:  fmt.Sprintf("UserPermissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserPermissionsResponseValidationError{
						field:  fmt.Sprintf("UserPermissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserPermissionsResponseValidationError{
					field:  fmt.Sprintf("UserPermissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserPermissionsResponseMultiError(errors)
	}

	return nil
}

// ListUserPermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserPermissionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPermissionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPermissionsResponseMultiError) AllErrors() []error { return m }

// ListUserPermissionsResponseValidationError is the validation error returned
// by ListUserPermissionsResponse.Validate if the designated constraints
// aren't met.
type ListUserPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPermissionsResponseValidationError) ErrorName() string {
	return "ListUserPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPermissionsResponseValidationError{}
