// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rbac

import (
	"gitee.com/flycash/permission-platform/internal/repository"
	"gitee.com/flycash/permission-platform/internal/repository/dao"
	"gitee.com/flycash/permission-platform/internal/service/rbac"
	"gitee.com/flycash/permission-platform/internal/test/ioc"
)

// Injectors from wire.go:

func Init() *Service {
	db := ioc.InitDBAndTables()
	businessConfigDAO := dao.NewBusinessConfigDAO(db)
	businessConfigRepository := repository.NewBusinessConfigRepository(businessConfigDAO)
	resourceDAO := dao.NewResourceDAO(db)
	resourceRepository := repository.NewResourceRepository(resourceDAO)
	permissionDAO := dao.NewPermissionDAO(db)
	permissionRepository := repository.NewPermissionRepository(permissionDAO)
	roleDAO := dao.NewRoleDAO(db)
	roleRepository := repository.NewRoleRepository(roleDAO)
	roleInclusionDAO := dao.NewRoleInclusionDAO(db)
	roleInclusionDefaultRepository := repository.NewRoleInclusionDefaultRepository(roleInclusionDAO)
	rolePermissionDAO := dao.NewRolePermissionDAO(db)
	rolePermissionDefaultRepository := repository.NewRolePermissionDefaultRepository(rolePermissionDAO)
	userRoleDAO := dao.NewUserRoleDAO(db)
	userRoleDefaultRepository := repository.NewUserRoleDefaultRepository(userRoleDAO)
	userPermissionDAO := dao.NewUserPermissionDAO(db)
	userPermissionDefaultRepository := repository.NewUserPermissionDefaultRepository(roleInclusionDAO, rolePermissionDAO, userRoleDAO, userPermissionDAO)
	token := ioc.InitJWTToken()
	service := rbac.NewService(businessConfigRepository, resourceRepository, permissionRepository, roleRepository, roleInclusionDefaultRepository, rolePermissionDefaultRepository, userRoleDefaultRepository, userPermissionDefaultRepository, token)
	permissionService := rbac.NewPermissionService(userPermissionDefaultRepository)
	rbacService := &Service{
		Svc:                service,
		PermissionSvc:      permissionService,
		BusinessConfigRepo: businessConfigRepository,
		ResourceRepo:       resourceRepository,
		PermissionRepo:     permissionRepository,
		RoleRepo:           roleRepository,
		RolePermissionRepo: rolePermissionDefaultRepository,
		UserRoleRepo:       userRoleDefaultRepository,
	}
	return rbacService
}

// wire.go:

type Service struct {
	Svc                rbac.Service
	PermissionSvc      rbac.PermissionService
	BusinessConfigRepo repository.BusinessConfigRepository
	ResourceRepo       repository.ResourceRepository
	PermissionRepo     repository.PermissionRepository
	RoleRepo           repository.RoleRepository
	RolePermissionRepo repository.RolePermissionRepository
	UserRoleRepo       repository.UserRoleRepository
}
