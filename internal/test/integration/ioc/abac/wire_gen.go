// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package abac

import (
	"gitee.com/flycash/permission-platform/internal/repository"
	"gitee.com/flycash/permission-platform/internal/repository/cache/local"
	"gitee.com/flycash/permission-platform/internal/repository/cache/redisx"
	"gitee.com/flycash/permission-platform/internal/repository/dao"
	"gitee.com/flycash/permission-platform/internal/service/abac"
	"gitee.com/flycash/permission-platform/internal/service/abac/evaluator"
	"github.com/ecodeclub/ecache/memory/lru"
	"github.com/ego-component/egorm"
	"github.com/redis/go-redis/v9"
)

// Injectors from wire.go:

func Init(db *egorm.Component, redisClient *redis.Client, lruCache *lru.Cache) *Service {
	permissionDAO := dao.NewPermissionDAO(db)
	permissionRepository := repository.NewPermissionRepository(permissionDAO)
	resourceDAO := dao.NewResourceDAO(db)
	resourceRepository := repository.NewResourceRepository(resourceDAO)
	policyDAO := dao.NewPolicyDAO(db)
	policyRepo := initAbacPolicyRepo(policyDAO, redisClient, lruCache)
	environmentAttributeDAO := dao.NewEnvironmentAttributeDAO(db)
	resourceAttributeValueDAO := dao.NewResourceAttributeValueDAO(db)
	subjectAttributeValueDAO := dao.NewSubjectAttributeValueDAO(db)
	attributeDefinitionDAO := dao.NewAttributeDefinitionDAO(db)
	attributeValueRepository := initAbacAttribueValRepo(environmentAttributeDAO, resourceAttributeValueDAO, subjectAttributeValueDAO, attributeDefinitionDAO, redisClient, lruCache)
	attributeDefinitionRepository := initAbacDefinitionLocalCache(attributeDefinitionDAO, redisClient, lruCache)
	selector := evaluator.NewSelector()
	policyExecutor := abac.NewPolicyExecutor(selector)
	permissionSvc := abac.NewPermissionSvc(permissionRepository, resourceRepository, policyRepo, attributeValueRepository, attributeDefinitionRepository, policyExecutor)
	service := &Service{
		PermissionSvc:  permissionSvc,
		ValRepo:        attributeValueRepository,
		DefinitionRepo: attributeDefinitionRepository,
		PermissionRepo: permissionRepository,
		ResourceRepo:   resourceRepository,
		PolicyRepo:     policyRepo,
	}
	return service
}

// wire.go:

type Service struct {
	PermissionSvc  abac.PermissionSvc
	ValRepo        repository.AttributeValueRepository
	DefinitionRepo repository.AttributeDefinitionRepository
	PermissionRepo repository.PermissionRepository
	ResourceRepo   repository.ResourceRepository
	PolicyRepo     repository.PolicyRepo
}

func initAbacDefinitionLocalCache(attrdao dao.AttributeDefinitionDAO, client *redis.Client, lruCache *lru.Cache) repository.AttributeDefinitionRepository {
	localCache := local.NewAbacDefLocalCache(lruCache, client)
	redisCache := redisx.NewAbacDefCache(client)
	return repository.NewAttributeDefinitionRepository(attrdao, localCache, redisCache)
}

func initAbacPolicyRepo(attrdao dao.PolicyDAO, client *redis.Client, lruCache *lru.Cache) repository.PolicyRepo {
	localCache := local.NewAbacPolicy(lruCache)
	redisCache := redisx.NewAbacPolicy(client)
	return repository.NewPolicyRepository(attrdao, localCache, redisCache)
}

func initAbacAttribueValRepo(envDao dao.EnvironmentAttributeDAO,
	resourceDao dao.ResourceAttributeValueDAO,
	subjectDao dao.SubjectAttributeValueDAO,
	definitionDao dao.AttributeDefinitionDAO,
	client *redis.Client, lruCache *lru.Cache,
) repository.AttributeValueRepository {
	localCache := local.NewAbacAttributeValCache(lruCache)
	redisCache := redisx.NewAbacAttributeValCache(client)
	return repository.NewAttributeValueRepository(envDao, resourceDao, subjectDao, definitionDao, redisCache, localCache)
}
