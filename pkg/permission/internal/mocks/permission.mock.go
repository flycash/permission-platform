// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/proto/gen/permission/v1/permission_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination=./pkg/permission/internal/mocks/permission.mock.go -package=mocks -source=./api/proto/gen/permission/v1/permission_grpc.pb.go PermissionServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	permissionv1 "gitee.com/flycash/permission-platform/api/proto/gen/permission/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPermissionServiceClient is a mock of PermissionServiceClient interface.
type MockPermissionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionServiceClientMockRecorder
	isgomock struct{}
}

// MockPermissionServiceClientMockRecorder is the mock recorder for MockPermissionServiceClient.
type MockPermissionServiceClientMockRecorder struct {
	mock *MockPermissionServiceClient
}

// NewMockPermissionServiceClient creates a new mock instance.
func NewMockPermissionServiceClient(ctrl *gomock.Controller) *MockPermissionServiceClient {
	mock := &MockPermissionServiceClient{ctrl: ctrl}
	mock.recorder = &MockPermissionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionServiceClient) EXPECT() *MockPermissionServiceClientMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockPermissionServiceClient) CheckPermission(ctx context.Context, in *permissionv1.CheckPermissionRequest, opts ...grpc.CallOption) (*permissionv1.CheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckPermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.CheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockPermissionServiceClientMockRecorder) CheckPermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockPermissionServiceClient)(nil).CheckPermission), varargs...)
}

// MockPermissionServiceServer is a mock of PermissionServiceServer interface.
type MockPermissionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionServiceServerMockRecorder
	isgomock struct{}
}

// MockPermissionServiceServerMockRecorder is the mock recorder for MockPermissionServiceServer.
type MockPermissionServiceServerMockRecorder struct {
	mock *MockPermissionServiceServer
}

// NewMockPermissionServiceServer creates a new mock instance.
func NewMockPermissionServiceServer(ctrl *gomock.Controller) *MockPermissionServiceServer {
	mock := &MockPermissionServiceServer{ctrl: ctrl}
	mock.recorder = &MockPermissionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionServiceServer) EXPECT() *MockPermissionServiceServerMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockPermissionServiceServer) CheckPermission(arg0 context.Context, arg1 *permissionv1.CheckPermissionRequest) (*permissionv1.CheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.CheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockPermissionServiceServerMockRecorder) CheckPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockPermissionServiceServer)(nil).CheckPermission), arg0, arg1)
}

// MockUnsafePermissionServiceServer is a mock of UnsafePermissionServiceServer interface.
type MockUnsafePermissionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePermissionServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafePermissionServiceServerMockRecorder is the mock recorder for MockUnsafePermissionServiceServer.
type MockUnsafePermissionServiceServerMockRecorder struct {
	mock *MockUnsafePermissionServiceServer
}

// NewMockUnsafePermissionServiceServer creates a new mock instance.
func NewMockUnsafePermissionServiceServer(ctrl *gomock.Controller) *MockUnsafePermissionServiceServer {
	mock := &MockUnsafePermissionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePermissionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePermissionServiceServer) EXPECT() *MockUnsafePermissionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPermissionServiceServer mocks base method.
func (m *MockUnsafePermissionServiceServer) mustEmbedUnimplementedPermissionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPermissionServiceServer")
}

// mustEmbedUnimplementedPermissionServiceServer indicates an expected call of mustEmbedUnimplementedPermissionServiceServer.
func (mr *MockUnsafePermissionServiceServerMockRecorder) mustEmbedUnimplementedPermissionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPermissionServiceServer", reflect.TypeOf((*MockUnsafePermissionServiceServer)(nil).mustEmbedUnimplementedPermissionServiceServer))
}

// MockBatchPermissionServiceClient is a mock of BatchPermissionServiceClient interface.
type MockBatchPermissionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBatchPermissionServiceClientMockRecorder
	isgomock struct{}
}

// MockBatchPermissionServiceClientMockRecorder is the mock recorder for MockBatchPermissionServiceClient.
type MockBatchPermissionServiceClientMockRecorder struct {
	mock *MockBatchPermissionServiceClient
}

// NewMockBatchPermissionServiceClient creates a new mock instance.
func NewMockBatchPermissionServiceClient(ctrl *gomock.Controller) *MockBatchPermissionServiceClient {
	mock := &MockBatchPermissionServiceClient{ctrl: ctrl}
	mock.recorder = &MockBatchPermissionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchPermissionServiceClient) EXPECT() *MockBatchPermissionServiceClientMockRecorder {
	return m.recorder
}

// BatchCheckPermission mocks base method.
func (m *MockBatchPermissionServiceClient) BatchCheckPermission(ctx context.Context, in *permissionv1.BatchCheckPermissionRequest, opts ...grpc.CallOption) (*permissionv1.BatchCheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCheckPermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.BatchCheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCheckPermission indicates an expected call of BatchCheckPermission.
func (mr *MockBatchPermissionServiceClientMockRecorder) BatchCheckPermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCheckPermission", reflect.TypeOf((*MockBatchPermissionServiceClient)(nil).BatchCheckPermission), varargs...)
}

// MockBatchPermissionServiceServer is a mock of BatchPermissionServiceServer interface.
type MockBatchPermissionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBatchPermissionServiceServerMockRecorder
	isgomock struct{}
}

// MockBatchPermissionServiceServerMockRecorder is the mock recorder for MockBatchPermissionServiceServer.
type MockBatchPermissionServiceServerMockRecorder struct {
	mock *MockBatchPermissionServiceServer
}

// NewMockBatchPermissionServiceServer creates a new mock instance.
func NewMockBatchPermissionServiceServer(ctrl *gomock.Controller) *MockBatchPermissionServiceServer {
	mock := &MockBatchPermissionServiceServer{ctrl: ctrl}
	mock.recorder = &MockBatchPermissionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchPermissionServiceServer) EXPECT() *MockBatchPermissionServiceServerMockRecorder {
	return m.recorder
}

// BatchCheckPermission mocks base method.
func (m *MockBatchPermissionServiceServer) BatchCheckPermission(arg0 context.Context, arg1 *permissionv1.BatchCheckPermissionRequest) (*permissionv1.BatchCheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCheckPermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.BatchCheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCheckPermission indicates an expected call of BatchCheckPermission.
func (mr *MockBatchPermissionServiceServerMockRecorder) BatchCheckPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCheckPermission", reflect.TypeOf((*MockBatchPermissionServiceServer)(nil).BatchCheckPermission), arg0, arg1)
}

// MockUnsafeBatchPermissionServiceServer is a mock of UnsafeBatchPermissionServiceServer interface.
type MockUnsafeBatchPermissionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBatchPermissionServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeBatchPermissionServiceServerMockRecorder is the mock recorder for MockUnsafeBatchPermissionServiceServer.
type MockUnsafeBatchPermissionServiceServerMockRecorder struct {
	mock *MockUnsafeBatchPermissionServiceServer
}

// NewMockUnsafeBatchPermissionServiceServer creates a new mock instance.
func NewMockUnsafeBatchPermissionServiceServer(ctrl *gomock.Controller) *MockUnsafeBatchPermissionServiceServer {
	mock := &MockUnsafeBatchPermissionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBatchPermissionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBatchPermissionServiceServer) EXPECT() *MockUnsafeBatchPermissionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBatchPermissionServiceServer mocks base method.
func (m *MockUnsafeBatchPermissionServiceServer) mustEmbedUnimplementedBatchPermissionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBatchPermissionServiceServer")
}

// mustEmbedUnimplementedBatchPermissionServiceServer indicates an expected call of mustEmbedUnimplementedBatchPermissionServiceServer.
func (mr *MockUnsafeBatchPermissionServiceServerMockRecorder) mustEmbedUnimplementedBatchPermissionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBatchPermissionServiceServer", reflect.TypeOf((*MockUnsafeBatchPermissionServiceServer)(nil).mustEmbedUnimplementedBatchPermissionServiceServer))
}
