// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/proto/gen/permission/v1/rbac_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -destination=./pkg/permission/internal/mocks/rbac.mock.go -package=mocks -source=./api/proto/gen/permission/v1/rbac_grpc.pb.go RBACServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	permissionv1 "gitee.com/flycash/permission-platform/api/proto/gen/permission/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRBACServiceClient is a mock of RBACServiceClient interface.
type MockRBACServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockRBACServiceClientMockRecorder
	isgomock struct{}
}

// MockRBACServiceClientMockRecorder is the mock recorder for MockRBACServiceClient.
type MockRBACServiceClientMockRecorder struct {
	mock *MockRBACServiceClient
}

// NewMockRBACServiceClient creates a new mock instance.
func NewMockRBACServiceClient(ctrl *gomock.Controller) *MockRBACServiceClient {
	mock := &MockRBACServiceClient{ctrl: ctrl}
	mock.recorder = &MockRBACServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBACServiceClient) EXPECT() *MockRBACServiceClientMockRecorder {
	return m.recorder
}

// CreateBusinessConfig mocks base method.
func (m *MockRBACServiceClient) CreateBusinessConfig(ctx context.Context, in *permissionv1.CreateBusinessConfigRequest, opts ...grpc.CallOption) (*permissionv1.CreateBusinessConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBusinessConfig", varargs...)
	ret0, _ := ret[0].(*permissionv1.CreateBusinessConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBusinessConfig indicates an expected call of CreateBusinessConfig.
func (mr *MockRBACServiceClientMockRecorder) CreateBusinessConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBusinessConfig", reflect.TypeOf((*MockRBACServiceClient)(nil).CreateBusinessConfig), varargs...)
}

// CreatePermission mocks base method.
func (m *MockRBACServiceClient) CreatePermission(ctx context.Context, in *permissionv1.CreatePermissionRequest, opts ...grpc.CallOption) (*permissionv1.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockRBACServiceClientMockRecorder) CreatePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockRBACServiceClient)(nil).CreatePermission), varargs...)
}

// CreateResource mocks base method.
func (m *MockRBACServiceClient) CreateResource(ctx context.Context, in *permissionv1.CreateResourceRequest, opts ...grpc.CallOption) (*permissionv1.CreateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResource", varargs...)
	ret0, _ := ret[0].(*permissionv1.CreateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockRBACServiceClientMockRecorder) CreateResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockRBACServiceClient)(nil).CreateResource), varargs...)
}

// CreateRole mocks base method.
func (m *MockRBACServiceClient) CreateRole(ctx context.Context, in *permissionv1.CreateRoleRequest, opts ...grpc.CallOption) (*permissionv1.CreateRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(*permissionv1.CreateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRBACServiceClientMockRecorder) CreateRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRBACServiceClient)(nil).CreateRole), varargs...)
}

// CreateRoleInclusion mocks base method.
func (m *MockRBACServiceClient) CreateRoleInclusion(ctx context.Context, in *permissionv1.CreateRoleInclusionRequest, opts ...grpc.CallOption) (*permissionv1.CreateRoleInclusionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRoleInclusion", varargs...)
	ret0, _ := ret[0].(*permissionv1.CreateRoleInclusionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleInclusion indicates an expected call of CreateRoleInclusion.
func (mr *MockRBACServiceClientMockRecorder) CreateRoleInclusion(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleInclusion", reflect.TypeOf((*MockRBACServiceClient)(nil).CreateRoleInclusion), varargs...)
}

// DeleteBusinessConfig mocks base method.
func (m *MockRBACServiceClient) DeleteBusinessConfig(ctx context.Context, in *permissionv1.DeleteBusinessConfigRequest, opts ...grpc.CallOption) (*permissionv1.DeleteBusinessConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBusinessConfig", varargs...)
	ret0, _ := ret[0].(*permissionv1.DeleteBusinessConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBusinessConfig indicates an expected call of DeleteBusinessConfig.
func (mr *MockRBACServiceClientMockRecorder) DeleteBusinessConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBusinessConfig", reflect.TypeOf((*MockRBACServiceClient)(nil).DeleteBusinessConfig), varargs...)
}

// DeletePermission mocks base method.
func (m *MockRBACServiceClient) DeletePermission(ctx context.Context, in *permissionv1.DeletePermissionRequest, opts ...grpc.CallOption) (*permissionv1.DeletePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.DeletePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockRBACServiceClientMockRecorder) DeletePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockRBACServiceClient)(nil).DeletePermission), varargs...)
}

// DeleteResource mocks base method.
func (m *MockRBACServiceClient) DeleteResource(ctx context.Context, in *permissionv1.DeleteResourceRequest, opts ...grpc.CallOption) (*permissionv1.DeleteResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResource", varargs...)
	ret0, _ := ret[0].(*permissionv1.DeleteResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockRBACServiceClientMockRecorder) DeleteResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockRBACServiceClient)(nil).DeleteResource), varargs...)
}

// DeleteRole mocks base method.
func (m *MockRBACServiceClient) DeleteRole(ctx context.Context, in *permissionv1.DeleteRoleRequest, opts ...grpc.CallOption) (*permissionv1.DeleteRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(*permissionv1.DeleteRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRBACServiceClientMockRecorder) DeleteRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRBACServiceClient)(nil).DeleteRole), varargs...)
}

// DeleteRoleInclusion mocks base method.
func (m *MockRBACServiceClient) DeleteRoleInclusion(ctx context.Context, in *permissionv1.DeleteRoleInclusionRequest, opts ...grpc.CallOption) (*permissionv1.DeleteRoleInclusionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRoleInclusion", varargs...)
	ret0, _ := ret[0].(*permissionv1.DeleteRoleInclusionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleInclusion indicates an expected call of DeleteRoleInclusion.
func (mr *MockRBACServiceClientMockRecorder) DeleteRoleInclusion(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleInclusion", reflect.TypeOf((*MockRBACServiceClient)(nil).DeleteRoleInclusion), varargs...)
}

// GetAllPermissions mocks base method.
func (m *MockRBACServiceClient) GetAllPermissions(ctx context.Context, in *permissionv1.GetAllPermissionsRequest, opts ...grpc.CallOption) (*permissionv1.GetAllPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllPermissions", varargs...)
	ret0, _ := ret[0].(*permissionv1.GetAllPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPermissions indicates an expected call of GetAllPermissions.
func (mr *MockRBACServiceClientMockRecorder) GetAllPermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissions", reflect.TypeOf((*MockRBACServiceClient)(nil).GetAllPermissions), varargs...)
}

// GetBusinessConfig mocks base method.
func (m *MockRBACServiceClient) GetBusinessConfig(ctx context.Context, in *permissionv1.GetBusinessConfigRequest, opts ...grpc.CallOption) (*permissionv1.GetBusinessConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBusinessConfig", varargs...)
	ret0, _ := ret[0].(*permissionv1.GetBusinessConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessConfig indicates an expected call of GetBusinessConfig.
func (mr *MockRBACServiceClientMockRecorder) GetBusinessConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessConfig", reflect.TypeOf((*MockRBACServiceClient)(nil).GetBusinessConfig), varargs...)
}

// GetPermission mocks base method.
func (m *MockRBACServiceClient) GetPermission(ctx context.Context, in *permissionv1.GetPermissionRequest, opts ...grpc.CallOption) (*permissionv1.GetPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.GetPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockRBACServiceClientMockRecorder) GetPermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockRBACServiceClient)(nil).GetPermission), varargs...)
}

// GetResource mocks base method.
func (m *MockRBACServiceClient) GetResource(ctx context.Context, in *permissionv1.GetResourceRequest, opts ...grpc.CallOption) (*permissionv1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*permissionv1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockRBACServiceClientMockRecorder) GetResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockRBACServiceClient)(nil).GetResource), varargs...)
}

// GetRole mocks base method.
func (m *MockRBACServiceClient) GetRole(ctx context.Context, in *permissionv1.GetRoleRequest, opts ...grpc.CallOption) (*permissionv1.GetRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRole", varargs...)
	ret0, _ := ret[0].(*permissionv1.GetRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRBACServiceClientMockRecorder) GetRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRBACServiceClient)(nil).GetRole), varargs...)
}

// GetRoleInclusion mocks base method.
func (m *MockRBACServiceClient) GetRoleInclusion(ctx context.Context, in *permissionv1.GetRoleInclusionRequest, opts ...grpc.CallOption) (*permissionv1.GetRoleInclusionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRoleInclusion", varargs...)
	ret0, _ := ret[0].(*permissionv1.GetRoleInclusionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleInclusion indicates an expected call of GetRoleInclusion.
func (mr *MockRBACServiceClientMockRecorder) GetRoleInclusion(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleInclusion", reflect.TypeOf((*MockRBACServiceClient)(nil).GetRoleInclusion), varargs...)
}

// GrantRolePermission mocks base method.
func (m *MockRBACServiceClient) GrantRolePermission(ctx context.Context, in *permissionv1.GrantRolePermissionRequest, opts ...grpc.CallOption) (*permissionv1.GrantRolePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantRolePermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.GrantRolePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantRolePermission indicates an expected call of GrantRolePermission.
func (mr *MockRBACServiceClientMockRecorder) GrantRolePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantRolePermission", reflect.TypeOf((*MockRBACServiceClient)(nil).GrantRolePermission), varargs...)
}

// GrantUserPermission mocks base method.
func (m *MockRBACServiceClient) GrantUserPermission(ctx context.Context, in *permissionv1.GrantUserPermissionRequest, opts ...grpc.CallOption) (*permissionv1.GrantUserPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantUserPermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.GrantUserPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockRBACServiceClientMockRecorder) GrantUserPermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockRBACServiceClient)(nil).GrantUserPermission), varargs...)
}

// GrantUserRole mocks base method.
func (m *MockRBACServiceClient) GrantUserRole(ctx context.Context, in *permissionv1.GrantUserRoleRequest, opts ...grpc.CallOption) (*permissionv1.GrantUserRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GrantUserRole", varargs...)
	ret0, _ := ret[0].(*permissionv1.GrantUserRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserRole indicates an expected call of GrantUserRole.
func (mr *MockRBACServiceClientMockRecorder) GrantUserRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserRole", reflect.TypeOf((*MockRBACServiceClient)(nil).GrantUserRole), varargs...)
}

// ListBusinessConfigs mocks base method.
func (m *MockRBACServiceClient) ListBusinessConfigs(ctx context.Context, in *permissionv1.ListBusinessConfigsRequest, opts ...grpc.CallOption) (*permissionv1.ListBusinessConfigsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBusinessConfigs", varargs...)
	ret0, _ := ret[0].(*permissionv1.ListBusinessConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBusinessConfigs indicates an expected call of ListBusinessConfigs.
func (mr *MockRBACServiceClientMockRecorder) ListBusinessConfigs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBusinessConfigs", reflect.TypeOf((*MockRBACServiceClient)(nil).ListBusinessConfigs), varargs...)
}

// ListPermissions mocks base method.
func (m *MockRBACServiceClient) ListPermissions(ctx context.Context, in *permissionv1.ListPermissionsRequest, opts ...grpc.CallOption) (*permissionv1.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPermissions", varargs...)
	ret0, _ := ret[0].(*permissionv1.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockRBACServiceClientMockRecorder) ListPermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockRBACServiceClient)(nil).ListPermissions), varargs...)
}

// ListResources mocks base method.
func (m *MockRBACServiceClient) ListResources(ctx context.Context, in *permissionv1.ListResourcesRequest, opts ...grpc.CallOption) (*permissionv1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResources", varargs...)
	ret0, _ := ret[0].(*permissionv1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockRBACServiceClientMockRecorder) ListResources(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockRBACServiceClient)(nil).ListResources), varargs...)
}

// ListRoleInclusions mocks base method.
func (m *MockRBACServiceClient) ListRoleInclusions(ctx context.Context, in *permissionv1.ListRoleInclusionsRequest, opts ...grpc.CallOption) (*permissionv1.ListRoleInclusionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoleInclusions", varargs...)
	ret0, _ := ret[0].(*permissionv1.ListRoleInclusionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleInclusions indicates an expected call of ListRoleInclusions.
func (mr *MockRBACServiceClientMockRecorder) ListRoleInclusions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleInclusions", reflect.TypeOf((*MockRBACServiceClient)(nil).ListRoleInclusions), varargs...)
}

// ListRolePermissions mocks base method.
func (m *MockRBACServiceClient) ListRolePermissions(ctx context.Context, in *permissionv1.ListRolePermissionsRequest, opts ...grpc.CallOption) (*permissionv1.ListRolePermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRolePermissions", varargs...)
	ret0, _ := ret[0].(*permissionv1.ListRolePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolePermissions indicates an expected call of ListRolePermissions.
func (mr *MockRBACServiceClientMockRecorder) ListRolePermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolePermissions", reflect.TypeOf((*MockRBACServiceClient)(nil).ListRolePermissions), varargs...)
}

// ListRoles mocks base method.
func (m *MockRBACServiceClient) ListRoles(ctx context.Context, in *permissionv1.ListRolesRequest, opts ...grpc.CallOption) (*permissionv1.ListRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoles", varargs...)
	ret0, _ := ret[0].(*permissionv1.ListRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockRBACServiceClientMockRecorder) ListRoles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockRBACServiceClient)(nil).ListRoles), varargs...)
}

// ListUserPermissions mocks base method.
func (m *MockRBACServiceClient) ListUserPermissions(ctx context.Context, in *permissionv1.ListUserPermissionsRequest, opts ...grpc.CallOption) (*permissionv1.ListUserPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserPermissions", varargs...)
	ret0, _ := ret[0].(*permissionv1.ListUserPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserPermissions indicates an expected call of ListUserPermissions.
func (mr *MockRBACServiceClientMockRecorder) ListUserPermissions(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPermissions", reflect.TypeOf((*MockRBACServiceClient)(nil).ListUserPermissions), varargs...)
}

// ListUserRoles mocks base method.
func (m *MockRBACServiceClient) ListUserRoles(ctx context.Context, in *permissionv1.ListUserRolesRequest, opts ...grpc.CallOption) (*permissionv1.ListUserRolesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserRoles", varargs...)
	ret0, _ := ret[0].(*permissionv1.ListUserRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserRoles indicates an expected call of ListUserRoles.
func (mr *MockRBACServiceClientMockRecorder) ListUserRoles(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRoles", reflect.TypeOf((*MockRBACServiceClient)(nil).ListUserRoles), varargs...)
}

// RevokeRolePermission mocks base method.
func (m *MockRBACServiceClient) RevokeRolePermission(ctx context.Context, in *permissionv1.RevokeRolePermissionRequest, opts ...grpc.CallOption) (*permissionv1.RevokeRolePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeRolePermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.RevokeRolePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeRolePermission indicates an expected call of RevokeRolePermission.
func (mr *MockRBACServiceClientMockRecorder) RevokeRolePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRolePermission", reflect.TypeOf((*MockRBACServiceClient)(nil).RevokeRolePermission), varargs...)
}

// RevokeUserPermission mocks base method.
func (m *MockRBACServiceClient) RevokeUserPermission(ctx context.Context, in *permissionv1.RevokeUserPermissionRequest, opts ...grpc.CallOption) (*permissionv1.RevokeUserPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeUserPermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.RevokeUserPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeUserPermission indicates an expected call of RevokeUserPermission.
func (mr *MockRBACServiceClientMockRecorder) RevokeUserPermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserPermission", reflect.TypeOf((*MockRBACServiceClient)(nil).RevokeUserPermission), varargs...)
}

// RevokeUserRole mocks base method.
func (m *MockRBACServiceClient) RevokeUserRole(ctx context.Context, in *permissionv1.RevokeUserRoleRequest, opts ...grpc.CallOption) (*permissionv1.RevokeUserRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeUserRole", varargs...)
	ret0, _ := ret[0].(*permissionv1.RevokeUserRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeUserRole indicates an expected call of RevokeUserRole.
func (mr *MockRBACServiceClientMockRecorder) RevokeUserRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserRole", reflect.TypeOf((*MockRBACServiceClient)(nil).RevokeUserRole), varargs...)
}

// UpdateBusinessConfig mocks base method.
func (m *MockRBACServiceClient) UpdateBusinessConfig(ctx context.Context, in *permissionv1.UpdateBusinessConfigRequest, opts ...grpc.CallOption) (*permissionv1.UpdateBusinessConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBusinessConfig", varargs...)
	ret0, _ := ret[0].(*permissionv1.UpdateBusinessConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBusinessConfig indicates an expected call of UpdateBusinessConfig.
func (mr *MockRBACServiceClientMockRecorder) UpdateBusinessConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessConfig", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdateBusinessConfig), varargs...)
}

// UpdatePermission mocks base method.
func (m *MockRBACServiceClient) UpdatePermission(ctx context.Context, in *permissionv1.UpdatePermissionRequest, opts ...grpc.CallOption) (*permissionv1.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePermission", varargs...)
	ret0, _ := ret[0].(*permissionv1.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockRBACServiceClientMockRecorder) UpdatePermission(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdatePermission), varargs...)
}

// UpdateResource mocks base method.
func (m *MockRBACServiceClient) UpdateResource(ctx context.Context, in *permissionv1.UpdateResourceRequest, opts ...grpc.CallOption) (*permissionv1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResource", varargs...)
	ret0, _ := ret[0].(*permissionv1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockRBACServiceClientMockRecorder) UpdateResource(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdateResource), varargs...)
}

// UpdateRole mocks base method.
func (m *MockRBACServiceClient) UpdateRole(ctx context.Context, in *permissionv1.UpdateRoleRequest, opts ...grpc.CallOption) (*permissionv1.UpdateRoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRole", varargs...)
	ret0, _ := ret[0].(*permissionv1.UpdateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRBACServiceClientMockRecorder) UpdateRole(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRBACServiceClient)(nil).UpdateRole), varargs...)
}

// MockRBACServiceServer is a mock of RBACServiceServer interface.
type MockRBACServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRBACServiceServerMockRecorder
	isgomock struct{}
}

// MockRBACServiceServerMockRecorder is the mock recorder for MockRBACServiceServer.
type MockRBACServiceServerMockRecorder struct {
	mock *MockRBACServiceServer
}

// NewMockRBACServiceServer creates a new mock instance.
func NewMockRBACServiceServer(ctrl *gomock.Controller) *MockRBACServiceServer {
	mock := &MockRBACServiceServer{ctrl: ctrl}
	mock.recorder = &MockRBACServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBACServiceServer) EXPECT() *MockRBACServiceServerMockRecorder {
	return m.recorder
}

// CreateBusinessConfig mocks base method.
func (m *MockRBACServiceServer) CreateBusinessConfig(arg0 context.Context, arg1 *permissionv1.CreateBusinessConfigRequest) (*permissionv1.CreateBusinessConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBusinessConfig", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.CreateBusinessConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBusinessConfig indicates an expected call of CreateBusinessConfig.
func (mr *MockRBACServiceServerMockRecorder) CreateBusinessConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBusinessConfig", reflect.TypeOf((*MockRBACServiceServer)(nil).CreateBusinessConfig), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockRBACServiceServer) CreatePermission(arg0 context.Context, arg1 *permissionv1.CreatePermissionRequest) (*permissionv1.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockRBACServiceServerMockRecorder) CreatePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockRBACServiceServer)(nil).CreatePermission), arg0, arg1)
}

// CreateResource mocks base method.
func (m *MockRBACServiceServer) CreateResource(arg0 context.Context, arg1 *permissionv1.CreateResourceRequest) (*permissionv1.CreateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.CreateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockRBACServiceServerMockRecorder) CreateResource(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockRBACServiceServer)(nil).CreateResource), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockRBACServiceServer) CreateRole(arg0 context.Context, arg1 *permissionv1.CreateRoleRequest) (*permissionv1.CreateRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.CreateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRBACServiceServerMockRecorder) CreateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRBACServiceServer)(nil).CreateRole), arg0, arg1)
}

// CreateRoleInclusion mocks base method.
func (m *MockRBACServiceServer) CreateRoleInclusion(arg0 context.Context, arg1 *permissionv1.CreateRoleInclusionRequest) (*permissionv1.CreateRoleInclusionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleInclusion", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.CreateRoleInclusionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoleInclusion indicates an expected call of CreateRoleInclusion.
func (mr *MockRBACServiceServerMockRecorder) CreateRoleInclusion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleInclusion", reflect.TypeOf((*MockRBACServiceServer)(nil).CreateRoleInclusion), arg0, arg1)
}

// DeleteBusinessConfig mocks base method.
func (m *MockRBACServiceServer) DeleteBusinessConfig(arg0 context.Context, arg1 *permissionv1.DeleteBusinessConfigRequest) (*permissionv1.DeleteBusinessConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBusinessConfig", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.DeleteBusinessConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBusinessConfig indicates an expected call of DeleteBusinessConfig.
func (mr *MockRBACServiceServerMockRecorder) DeleteBusinessConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBusinessConfig", reflect.TypeOf((*MockRBACServiceServer)(nil).DeleteBusinessConfig), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockRBACServiceServer) DeletePermission(arg0 context.Context, arg1 *permissionv1.DeletePermissionRequest) (*permissionv1.DeletePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.DeletePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockRBACServiceServerMockRecorder) DeletePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockRBACServiceServer)(nil).DeletePermission), arg0, arg1)
}

// DeleteResource mocks base method.
func (m *MockRBACServiceServer) DeleteResource(arg0 context.Context, arg1 *permissionv1.DeleteResourceRequest) (*permissionv1.DeleteResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.DeleteResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockRBACServiceServerMockRecorder) DeleteResource(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockRBACServiceServer)(nil).DeleteResource), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockRBACServiceServer) DeleteRole(arg0 context.Context, arg1 *permissionv1.DeleteRoleRequest) (*permissionv1.DeleteRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.DeleteRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRBACServiceServerMockRecorder) DeleteRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRBACServiceServer)(nil).DeleteRole), arg0, arg1)
}

// DeleteRoleInclusion mocks base method.
func (m *MockRBACServiceServer) DeleteRoleInclusion(arg0 context.Context, arg1 *permissionv1.DeleteRoleInclusionRequest) (*permissionv1.DeleteRoleInclusionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleInclusion", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.DeleteRoleInclusionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRoleInclusion indicates an expected call of DeleteRoleInclusion.
func (mr *MockRBACServiceServerMockRecorder) DeleteRoleInclusion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleInclusion", reflect.TypeOf((*MockRBACServiceServer)(nil).DeleteRoleInclusion), arg0, arg1)
}

// GetAllPermissions mocks base method.
func (m *MockRBACServiceServer) GetAllPermissions(arg0 context.Context, arg1 *permissionv1.GetAllPermissionsRequest) (*permissionv1.GetAllPermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissions", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GetAllPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPermissions indicates an expected call of GetAllPermissions.
func (mr *MockRBACServiceServerMockRecorder) GetAllPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissions", reflect.TypeOf((*MockRBACServiceServer)(nil).GetAllPermissions), arg0, arg1)
}

// GetBusinessConfig mocks base method.
func (m *MockRBACServiceServer) GetBusinessConfig(arg0 context.Context, arg1 *permissionv1.GetBusinessConfigRequest) (*permissionv1.GetBusinessConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBusinessConfig", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GetBusinessConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBusinessConfig indicates an expected call of GetBusinessConfig.
func (mr *MockRBACServiceServerMockRecorder) GetBusinessConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBusinessConfig", reflect.TypeOf((*MockRBACServiceServer)(nil).GetBusinessConfig), arg0, arg1)
}

// GetPermission mocks base method.
func (m *MockRBACServiceServer) GetPermission(arg0 context.Context, arg1 *permissionv1.GetPermissionRequest) (*permissionv1.GetPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GetPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockRBACServiceServerMockRecorder) GetPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockRBACServiceServer)(nil).GetPermission), arg0, arg1)
}

// GetResource mocks base method.
func (m *MockRBACServiceServer) GetResource(arg0 context.Context, arg1 *permissionv1.GetResourceRequest) (*permissionv1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockRBACServiceServerMockRecorder) GetResource(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockRBACServiceServer)(nil).GetResource), arg0, arg1)
}

// GetRole mocks base method.
func (m *MockRBACServiceServer) GetRole(arg0 context.Context, arg1 *permissionv1.GetRoleRequest) (*permissionv1.GetRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GetRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRBACServiceServerMockRecorder) GetRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRBACServiceServer)(nil).GetRole), arg0, arg1)
}

// GetRoleInclusion mocks base method.
func (m *MockRBACServiceServer) GetRoleInclusion(arg0 context.Context, arg1 *permissionv1.GetRoleInclusionRequest) (*permissionv1.GetRoleInclusionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleInclusion", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GetRoleInclusionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleInclusion indicates an expected call of GetRoleInclusion.
func (mr *MockRBACServiceServerMockRecorder) GetRoleInclusion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleInclusion", reflect.TypeOf((*MockRBACServiceServer)(nil).GetRoleInclusion), arg0, arg1)
}

// GrantRolePermission mocks base method.
func (m *MockRBACServiceServer) GrantRolePermission(arg0 context.Context, arg1 *permissionv1.GrantRolePermissionRequest) (*permissionv1.GrantRolePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantRolePermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GrantRolePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantRolePermission indicates an expected call of GrantRolePermission.
func (mr *MockRBACServiceServerMockRecorder) GrantRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantRolePermission", reflect.TypeOf((*MockRBACServiceServer)(nil).GrantRolePermission), arg0, arg1)
}

// GrantUserPermission mocks base method.
func (m *MockRBACServiceServer) GrantUserPermission(arg0 context.Context, arg1 *permissionv1.GrantUserPermissionRequest) (*permissionv1.GrantUserPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GrantUserPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockRBACServiceServerMockRecorder) GrantUserPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockRBACServiceServer)(nil).GrantUserPermission), arg0, arg1)
}

// GrantUserRole mocks base method.
func (m *MockRBACServiceServer) GrantUserRole(arg0 context.Context, arg1 *permissionv1.GrantUserRoleRequest) (*permissionv1.GrantUserRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserRole", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.GrantUserRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserRole indicates an expected call of GrantUserRole.
func (mr *MockRBACServiceServerMockRecorder) GrantUserRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserRole", reflect.TypeOf((*MockRBACServiceServer)(nil).GrantUserRole), arg0, arg1)
}

// ListBusinessConfigs mocks base method.
func (m *MockRBACServiceServer) ListBusinessConfigs(arg0 context.Context, arg1 *permissionv1.ListBusinessConfigsRequest) (*permissionv1.ListBusinessConfigsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBusinessConfigs", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.ListBusinessConfigsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBusinessConfigs indicates an expected call of ListBusinessConfigs.
func (mr *MockRBACServiceServerMockRecorder) ListBusinessConfigs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBusinessConfigs", reflect.TypeOf((*MockRBACServiceServer)(nil).ListBusinessConfigs), arg0, arg1)
}

// ListPermissions mocks base method.
func (m *MockRBACServiceServer) ListPermissions(arg0 context.Context, arg1 *permissionv1.ListPermissionsRequest) (*permissionv1.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPermissions", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPermissions indicates an expected call of ListPermissions.
func (mr *MockRBACServiceServerMockRecorder) ListPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPermissions", reflect.TypeOf((*MockRBACServiceServer)(nil).ListPermissions), arg0, arg1)
}

// ListResources mocks base method.
func (m *MockRBACServiceServer) ListResources(arg0 context.Context, arg1 *permissionv1.ListResourcesRequest) (*permissionv1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockRBACServiceServerMockRecorder) ListResources(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockRBACServiceServer)(nil).ListResources), arg0, arg1)
}

// ListRoleInclusions mocks base method.
func (m *MockRBACServiceServer) ListRoleInclusions(arg0 context.Context, arg1 *permissionv1.ListRoleInclusionsRequest) (*permissionv1.ListRoleInclusionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoleInclusions", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.ListRoleInclusionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoleInclusions indicates an expected call of ListRoleInclusions.
func (mr *MockRBACServiceServerMockRecorder) ListRoleInclusions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoleInclusions", reflect.TypeOf((*MockRBACServiceServer)(nil).ListRoleInclusions), arg0, arg1)
}

// ListRolePermissions mocks base method.
func (m *MockRBACServiceServer) ListRolePermissions(arg0 context.Context, arg1 *permissionv1.ListRolePermissionsRequest) (*permissionv1.ListRolePermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRolePermissions", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.ListRolePermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRolePermissions indicates an expected call of ListRolePermissions.
func (mr *MockRBACServiceServerMockRecorder) ListRolePermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRolePermissions", reflect.TypeOf((*MockRBACServiceServer)(nil).ListRolePermissions), arg0, arg1)
}

// ListRoles mocks base method.
func (m *MockRBACServiceServer) ListRoles(arg0 context.Context, arg1 *permissionv1.ListRolesRequest) (*permissionv1.ListRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.ListRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockRBACServiceServerMockRecorder) ListRoles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockRBACServiceServer)(nil).ListRoles), arg0, arg1)
}

// ListUserPermissions mocks base method.
func (m *MockRBACServiceServer) ListUserPermissions(arg0 context.Context, arg1 *permissionv1.ListUserPermissionsRequest) (*permissionv1.ListUserPermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserPermissions", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.ListUserPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserPermissions indicates an expected call of ListUserPermissions.
func (mr *MockRBACServiceServerMockRecorder) ListUserPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPermissions", reflect.TypeOf((*MockRBACServiceServer)(nil).ListUserPermissions), arg0, arg1)
}

// ListUserRoles mocks base method.
func (m *MockRBACServiceServer) ListUserRoles(arg0 context.Context, arg1 *permissionv1.ListUserRolesRequest) (*permissionv1.ListUserRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserRoles", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.ListUserRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserRoles indicates an expected call of ListUserRoles.
func (mr *MockRBACServiceServerMockRecorder) ListUserRoles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserRoles", reflect.TypeOf((*MockRBACServiceServer)(nil).ListUserRoles), arg0, arg1)
}

// RevokeRolePermission mocks base method.
func (m *MockRBACServiceServer) RevokeRolePermission(arg0 context.Context, arg1 *permissionv1.RevokeRolePermissionRequest) (*permissionv1.RevokeRolePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRolePermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.RevokeRolePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeRolePermission indicates an expected call of RevokeRolePermission.
func (mr *MockRBACServiceServerMockRecorder) RevokeRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRolePermission", reflect.TypeOf((*MockRBACServiceServer)(nil).RevokeRolePermission), arg0, arg1)
}

// RevokeUserPermission mocks base method.
func (m *MockRBACServiceServer) RevokeUserPermission(arg0 context.Context, arg1 *permissionv1.RevokeUserPermissionRequest) (*permissionv1.RevokeUserPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserPermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.RevokeUserPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeUserPermission indicates an expected call of RevokeUserPermission.
func (mr *MockRBACServiceServerMockRecorder) RevokeUserPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserPermission", reflect.TypeOf((*MockRBACServiceServer)(nil).RevokeUserPermission), arg0, arg1)
}

// RevokeUserRole mocks base method.
func (m *MockRBACServiceServer) RevokeUserRole(arg0 context.Context, arg1 *permissionv1.RevokeUserRoleRequest) (*permissionv1.RevokeUserRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserRole", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.RevokeUserRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeUserRole indicates an expected call of RevokeUserRole.
func (mr *MockRBACServiceServerMockRecorder) RevokeUserRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserRole", reflect.TypeOf((*MockRBACServiceServer)(nil).RevokeUserRole), arg0, arg1)
}

// UpdateBusinessConfig mocks base method.
func (m *MockRBACServiceServer) UpdateBusinessConfig(arg0 context.Context, arg1 *permissionv1.UpdateBusinessConfigRequest) (*permissionv1.UpdateBusinessConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessConfig", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.UpdateBusinessConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBusinessConfig indicates an expected call of UpdateBusinessConfig.
func (mr *MockRBACServiceServerMockRecorder) UpdateBusinessConfig(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessConfig", reflect.TypeOf((*MockRBACServiceServer)(nil).UpdateBusinessConfig), arg0, arg1)
}

// UpdatePermission mocks base method.
func (m *MockRBACServiceServer) UpdatePermission(arg0 context.Context, arg1 *permissionv1.UpdatePermissionRequest) (*permissionv1.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockRBACServiceServerMockRecorder) UpdatePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockRBACServiceServer)(nil).UpdatePermission), arg0, arg1)
}

// UpdateResource mocks base method.
func (m *MockRBACServiceServer) UpdateResource(arg0 context.Context, arg1 *permissionv1.UpdateResourceRequest) (*permissionv1.UpdateResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.UpdateResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockRBACServiceServerMockRecorder) UpdateResource(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockRBACServiceServer)(nil).UpdateResource), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockRBACServiceServer) UpdateRole(arg0 context.Context, arg1 *permissionv1.UpdateRoleRequest) (*permissionv1.UpdateRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(*permissionv1.UpdateRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRBACServiceServerMockRecorder) UpdateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRBACServiceServer)(nil).UpdateRole), arg0, arg1)
}

// MockUnsafeRBACServiceServer is a mock of UnsafeRBACServiceServer interface.
type MockUnsafeRBACServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRBACServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeRBACServiceServerMockRecorder is the mock recorder for MockUnsafeRBACServiceServer.
type MockUnsafeRBACServiceServerMockRecorder struct {
	mock *MockUnsafeRBACServiceServer
}

// NewMockUnsafeRBACServiceServer creates a new mock instance.
func NewMockUnsafeRBACServiceServer(ctrl *gomock.Controller) *MockUnsafeRBACServiceServer {
	mock := &MockUnsafeRBACServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRBACServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRBACServiceServer) EXPECT() *MockUnsafeRBACServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRBACServiceServer mocks base method.
func (m *MockUnsafeRBACServiceServer) mustEmbedUnimplementedRBACServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRBACServiceServer")
}

// mustEmbedUnimplementedRBACServiceServer indicates an expected call of mustEmbedUnimplementedRBACServiceServer.
func (mr *MockUnsafeRBACServiceServerMockRecorder) mustEmbedUnimplementedRBACServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRBACServiceServer", reflect.TypeOf((*MockUnsafeRBACServiceServer)(nil).mustEmbedUnimplementedRBACServiceServer))
}
