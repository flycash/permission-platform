// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	rbac2 "gitee.com/flycash/permission-platform/internal/api/grpc/rbac"
	audit2 "gitee.com/flycash/permission-platform/internal/event/audit"
	"gitee.com/flycash/permission-platform/internal/ioc"
	"gitee.com/flycash/permission-platform/internal/repository"
	"gitee.com/flycash/permission-platform/internal/repository/dao"
	"gitee.com/flycash/permission-platform/internal/repository/dao/audit"
	"gitee.com/flycash/permission-platform/internal/service/rbac"
	"github.com/confluentinc/confluent-kafka-go/v2/kafka"
	"github.com/google/wire"
	"github.com/gotomicro/ego/core/econf"
	"github.com/withlin/canal-go/client"
	"time"
)

// Injectors from wire.go:

func InitApp() *ioc.App {
	db := ioc.InitDB()
	businessConfigDAO := dao.NewBusinessConfigDAO(db)
	businessConfigRepository := repository.NewBusinessConfigRepository(businessConfigDAO)
	resourceDAO := dao.NewResourceDAO(db)
	resourceRepository := repository.NewResourceRepository(resourceDAO)
	permissionDAO := dao.NewPermissionDAO(db)
	permissionRepository := repository.NewPermissionRepository(permissionDAO)
	roleDAO := dao.NewRoleDAO(db)
	roleRepository := repository.NewRoleRepository(roleDAO)
	roleInclusionDAO := dao.NewRoleInclusionDAO(db)
	roleInclusionRepository := repository.NewRoleInclusionRepository(roleInclusionDAO)
	rolePermissionDAO := dao.NewRolePermissionDAO(db)
	rolePermissionRepository := repository.NewRolePermissionRepository(rolePermissionDAO)
	userRoleDAO := dao.NewUserRoleDAO(db)
	userRoleRepository := repository.NewUserRoleRepository(userRoleDAO)
	userPermissionDAO := dao.NewUserPermissionDAO(db)
	userPermissionRepository := repository.NewUserPermissionRepository(userPermissionDAO)
	defaultRBACRepository := repository.NewDefaultRBACRepository(businessConfigRepository, resourceRepository, permissionRepository, roleRepository, roleInclusionRepository, rolePermissionRepository, userRoleRepository, userPermissionRepository)
	cmdable := ioc.InitRedisCmd()
	cache := ioc.InitLocalCache()
	component := ioc.InitEtcdClient()
	v := ioc.InitCacheKeyFunc()
	cacheCache := ioc.InitMultipleLevelCache(cmdable, cache, defaultRBACRepository, component, v)
	cachedRBACRepository := repository.NewCachedRBACRepository(defaultRBACRepository, cacheCache, v)
	rbacRepository := convertRepository(cachedRBACRepository)
	token := ioc.InitJWTToken()
	service := rbac.NewService(rbacRepository, token)
	server := rbac2.NewServer(service)
	permissionService := rbac.NewPermissionService(rbacRepository)
	permissionServiceServer := rbac2.NewPermissionServiceServer(permissionService)
	operationLogDAO := audit.NewOperationLogDAO(db)
	v2 := ioc.InitGRPC(server, permissionServiceServer, token, operationLogDAO)
	canalConnector := ioc.InitCanalConnector()
	producer := ioc.InitKafkaProducer()
	canalUserRoleBinlogEventProducer := initUserRoleBinlogEventProducer(canalConnector, producer)
	userRoleLogDAO := audit.NewUserRoleLogDAO(db)
	userRoleBinlogEventConsumer := initUserRoleBinlogEventConsumer(userRoleLogDAO)
	v3 := ioc.InitTasks(canalUserRoleBinlogEventProducer, userRoleBinlogEventConsumer)
	app := &ioc.App{
		GrpcServers: v2,
		Tasks:       v3,
	}
	return app
}

// wire.go:

var (
	baseSet    = wire.NewSet(ioc.InitDB, ioc.InitEtcdClient, ioc.InitIDGenerator, ioc.InitRedisClient, ioc.InitLocalCache, ioc.InitRedisCmd, ioc.InitJWTToken, ioc.InitMultipleLevelCache, ioc.InitCacheKeyFunc, ioc.InitCanalConnector, ioc.InitKafkaProducer)
	rbacSvcSet = wire.NewSet(rbac.NewService, rbac.NewPermissionService, repository.NewDefaultRBACRepository, repository.NewCachedRBACRepository, convertRepository, dao.NewBusinessConfigDAO, repository.NewBusinessConfigRepository, dao.NewResourceDAO, repository.NewResourceRepository, dao.NewPermissionDAO, repository.NewPermissionRepository, dao.NewRoleDAO, repository.NewRoleRepository, dao.NewRoleInclusionDAO, repository.NewRoleInclusionRepository, dao.NewRolePermissionDAO, repository.NewRolePermissionRepository, dao.NewUserRoleDAO, repository.NewUserRoleRepository, dao.NewUserPermissionDAO, repository.NewUserPermissionRepository, audit.NewUserRoleLogDAO, audit.NewOperationLogDAO, initUserRoleBinlogEventProducer,
		initUserRoleBinlogEventConsumer,
	)
)

func convertRepository(repo *repository.CachedRBACRepository) repository.RBACRepository {
	return repo
}

func initUserRoleBinlogEventProducer(
	canalConn client.CanalConnector,
	kafkaProducer *kafka.Producer,
) *audit2.CanalUserRoleBinlogEventProducer {

	type Producer struct {
		MinLoopDuration time.Duration `yaml:"minLoopDuration"`
		BatchSize       int32         `yaml:"batchSize"`
		Timeout         int64         `yaml:"timeout"`
		Units           int32         `yaml:"units"`
	}

	type Config struct {
		Topic    string   `yaml:"topic"`
		Producer Producer `yaml:"producer"`
	}
	var cfg Config
	err := econf.UnmarshalKey("userRoleBinlogEvent", &cfg)
	if err != nil {
		panic(err)
	}
	producer, err := audit2.NewUserRoleBinlogEventProducer(kafkaProducer, cfg.Topic)
	if err != nil {
		panic(err)
	}
	eventProducer := audit2.NewCanalUserRoleBinlogEventProducer(
		canalConn,
		producer,
		cfg.Producer.MinLoopDuration,
		cfg.Producer.BatchSize,
		cfg.Producer.Timeout,
		cfg.Producer.Units,
	)
	return eventProducer
}

func initUserRoleBinlogEventConsumer(dao2 audit.UserRoleLogDAO) *audit2.UserRoleBinlogEventConsumer {
	type Consumer struct {
		GroupID string `yaml:"groupId"`
	}
	type Config struct {
		Topic    string   `yaml:"topic"`
		Consumer Consumer `yaml:"consumer"`
	}
	var cfg Config
	err := econf.UnmarshalKey("userRoleBinlogEvent", &cfg)
	if err != nil {
		panic(err)
	}
	eventConsumer, err := audit2.NewUserRoleBinlogEventConsumer(ioc.InitKafkaConsumer(cfg.Consumer.GroupID), dao2, cfg.Topic)
	if err != nil {
		panic(err)
	}
	return eventConsumer
}
